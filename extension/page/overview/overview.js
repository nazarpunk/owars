"use strict";{const e=e=>{let t=e.split(" "),n=0;for(let e=0;e<t.length;e++){const l=t[e].slice(-1),i=parseInt(t[e].replace(/(\d+)\w/g,"$1"));"d"===l&&(n+=60*i*60*24),"h"===l&&(n+=60*i*60),"m"===l&&(n+=60*i),"s"===l&&(n+=i)}return n},t=e=>new Date(e.getTime()-6e4*e.getTimezoneOffset()).toISOString().replace("T"," ").substring(0,19),n=e=>{const n=new Date(1e3*e);return t(new Date(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds()))},l=()=>{const l=document.querySelectorAll('table[width="530"]')[1];if(l&&l.querySelectorAll("tr").length>1){const r=l.querySelectorAll("tr:not(:first-child)");for(let l=0;l<r.length;l++){const i=r[l].firstElementChild.nextElementSibling,s=i.nextElementSibling,o=s.firstElementChild.outerHTML,m=s.firstElementChild.nextElementSibling.innerHTML;if(!s.firstElementChild.nextElementSibling.nextElementSibling)continue;const d="IMG"===s.firstElementChild.nextElementSibling.nextElementSibling.nodeName?s.firstElementChild.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML:s.firstElementChild.nextElementSibling.nextElementSibling.innerHTML,c=null!==s.lastChild.nodeValue?s.lastChild.nodeValue.split(":")[1]:s.lastChild.outerHTML,g=e(r[l].firstChild.firstElementChild.innerHTML);for(let e=l+1;e<r.length;e++){const s=r[e].firstElementChild.nextElementSibling.nextElementSibling,a=s.firstElementChild.outerHTML,E=s.firstElementChild.nextElementSibling.innerHTML,h="IMG"===s.firstElementChild.nextElementSibling.nextElementSibling.nodeName?s.firstElementChild.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML:s.firstElementChild.nextElementSibling.nextElementSibling.innerHTML,u=null!=s.lastChild.nodeValue?s.lastChild.nodeValue.split(":")[1]:s.lastChild.outerHTML;if(a===o&&E===d&&h===m&&u===c){const s=parseInt(r[e].firstChild.firstElementChild.attributes.alt.value),o=new Date(n(s));o.setSeconds(o.getSeconds()-2*g),1===r[l].firstChild.nextElementSibling.childElementCount&&(i.innerHTML+=`<div class="return_time" style="min-width: 75px;">${t(o)}</div>`);break}}}i()}},i=()=>{const e=document.getElementsByClassName("return_time");setInterval(()=>{for(let n=0;n<e.length;n++){const l=new Date(e[n].innerHTML);l.setSeconds(l.getSeconds()+2),e[n].innerHTML=t(l)}},1e3)};(()=>{const e=document.querySelector('th[colspan="3"]');if(null===e)return;const n=new Date(e.innerHTML);setInterval((function(){n.setSeconds(n.getSeconds()+1),e.innerHTML=t(n)}),1e3)})(),l(),document.querySelectorAll("th[width='360']").forEach(e=>{if(!/с\s+миссией:\s+Атаковать/.test(e.textContent))return;const t=e.parentElement;if(!(t instanceof HTMLTableRowElement))return;const n=t.querySelector(":scope > th:nth-child(1) a[id]"),l=1e3*+n.getAttribute("alt"),i=new Date(1e3*+n.getAttribute("alt"));console.log(l,n.textContent,i.toLocaleDateString(),i.toLocaleTimeString())})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
