"use strict";{const e=new Audio("https://q4dizzy.ru/alarm.wav"),t="/?option=overview",n=(e,t)=>{const n=new XMLHttpRequest;n.open("get",e,!0),n.responseType="document",n.send(null),n.onload=()=>{4===n.readyState&&(200===n.status?t(n):console.error(n.statusText))}},l=e=>{let t=e.split(" "),n=0;for(let e=0;e<t.length;e++){const l=t[e].slice(-1),i=parseInt(t[e].replace(/(\d+)\w/g,"$1"));"d"===l&&(n+=60*i*60*24),"h"===l&&(n+=60*i*60),"m"===l&&(n+=60*i),"s"===l&&(n+=i)}return n},i=e=>new Date(e.getTime()-6e4*e.getTimezoneOffset()).toISOString().replace("T"," ").substring(0,19),r=e=>{const t=new Date(1e3*e);return i(new Date(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds()))},s=()=>{n(t,t=>{const n=t.response.querySelectorAll("tr[style]");for(let t=0;t<n.length;t++)if("rgb(255,73,74)"===n[t].style.color)return void e.play()})},o=()=>{const e=document.querySelectorAll('table[width="530"]')[1];if(e.querySelectorAll("tr").length>1){const t=e.querySelectorAll("tr:not(:first-child)");for(let e=0;e<t.length;e++){const n=t[e].firstElementChild.nextElementSibling,s=n.nextElementSibling,o=s.firstElementChild.outerHTML,d=s.firstElementChild.nextElementSibling.innerHTML,m="IMG"===s.firstElementChild.nextElementSibling.nextElementSibling.nodeName?s.firstElementChild.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML:s.firstElementChild.nextElementSibling.nextElementSibling.innerHTML,a=null!==s.lastChild.nodeValue?s.lastChild.nodeValue.split(":")[1]:s.lastChild.outerHTML,g=l(t[e].firstChild.firstElementChild.innerHTML);for(let l=e+1;l<t.length;l++){const s=t[l].firstElementChild.nextElementSibling.nextElementSibling,c=s.firstElementChild.outerHTML,u=s.firstElementChild.nextElementSibling.innerHTML,h="IMG"===s.firstElementChild.nextElementSibling.nextElementSibling.nodeName?s.firstElementChild.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML:s.firstElementChild.nextElementSibling.nextElementSibling.innerHTML,E=null!=s.lastChild.nodeValue?s.lastChild.nodeValue.split(":")[1]:s.lastChild.outerHTML;if(c===o&&u===m&&h===d&&E===a){const s=parseInt(t[l].firstChild.firstElementChild.attributes.alt.value),o=new Date(r(s));o.setSeconds(o.getSeconds()-2*g),1===t[e].firstChild.nextElementSibling.childElementCount&&(n.innerHTML+='<div class="return_time" style="min-width: 75px;">'+i(o)+"</div>");break}}}d()}},d=()=>{const e=document.getElementsByClassName("return_time");setInterval(()=>{for(let t=0;t<e.length;t++){const n=new Date(e[t].innerHTML);n.setSeconds(n.getSeconds()+2),e[t].innerHTML=i(n)}},1e3)};(()=>{const e=document.querySelector('th[colspan="3"]');if(null===e)return;const t=new Date(e.innerHTML);setInterval((function(){t.setSeconds(t.getSeconds()+1),e.innerHTML=i(t)}),1e3)})(),o(),s(),setInterval(s,3e6)}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
